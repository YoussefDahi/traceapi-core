package org.usf.traceapi.core;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import lombok.RequiredArgsConstructor;
import lombok.experimental.Delegate;

/**
 * 
 * @author u$f
 *
 */
@RequiredArgsConstructor
public final class PreparedStatementWrapper implements PreparedStatement {

	@Delegate
	private final PreparedStatement ps;
	private final DatabaseActionTracer tracer;

	@Override
	public boolean execute(String sql) throws SQLException {
		return tracer.sql(()-> ps.execute(sql));
	}
	
	@Override
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		return tracer.sql(()-> ps.execute(sql, autoGeneratedKeys));
	}
	
	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		return tracer.sql(()-> ps.execute(sql, columnIndexes));
	}
	
	@Override
	public boolean execute(String sql, String[] columnNames) throws SQLException {
		return tracer.sql(()-> ps.execute(sql, columnNames));
	}
	
	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		return tracer.select(()-> ps.executeQuery(sql));
	}
	
	@Override
	public int executeUpdate(String sql) throws SQLException {
		return tracer.update(()-> ps.executeUpdate(sql));
	}
	
	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		return tracer.update(()-> ps.executeUpdate(sql, autoGeneratedKeys));
	}
	
	@Override
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		return tracer.update(()-> ps.executeUpdate(sql, columnIndexes));
	}
	
	@Override
	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		return tracer.update(()-> ps.executeUpdate(sql, columnNames));
	}

	@Override
	public int[] executeBatch() throws SQLException {
		return tracer.batch(ps::executeBatch);
	}
	
	@Override
	public long executeLargeUpdate(String sql) throws SQLException {
		return tracer.update(()-> ps.executeLargeUpdate(sql));
	}
	
	@Override
	public long executeLargeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		return tracer.update(()-> ps.executeLargeUpdate(sql, autoGeneratedKeys));
	}
	
	@Override
	public long executeLargeUpdate(String sql, int[] columnIndexes) throws SQLException {
		return tracer.update(()-> ps.executeLargeUpdate(sql, columnIndexes));
	}
	
	@Override
	public long executeLargeUpdate(String sql, String[] columnNames) throws SQLException {
		return tracer.update(()-> ps.executeLargeUpdate(sql, columnNames));
	}
	
	@Override
	public long[] executeLargeBatch() throws SQLException {
		return tracer.batch(ps::executeLargeBatch);
	}
	
	//PreparedStatement
	
	@Override
	public boolean execute() throws SQLException {
		return tracer.sql(ps::execute);
	}
	
	@Override
	public ResultSet executeQuery() throws SQLException {
		return tracer.select(ps::executeQuery);
	}
	
	@Override
	public int executeUpdate() throws SQLException {
		return tracer.update(ps::executeUpdate);
	}
	
	@Override
	public long executeLargeUpdate() throws SQLException {
		return tracer.update(ps::executeLargeUpdate);
	}
}
